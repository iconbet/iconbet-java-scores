version = '0.1.0'

dependencies {
    compileOnly 'foundation.icon:javaee-api:0.9.0'

    testImplementation 'foundation.icon:javaee-unittest:0.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
	testImplementation project(':daolette')
	testImplementation project(':dividend-distribution-score')
	testImplementation project(':game-authorization-score')
	testImplementation project(':reward-distribution')
	testImplementation project(':tap-token')
	testImplementation project(':testinteg')
	testImplementation 'foundation.icon:icon-sdk:2.0.0'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'

}

optimizedJar {
    mainClassName = 'com.iconbet.score.daodice.DaoDice'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

deployJar {
	endpoints {
		sejong {
			uri = 'https://sejong.net.solidwallet.io/api/v3'
			nid = 0x53
			to = "cxd7750d5a7f270373a758a783b96db61f174a1967"
		}
		local {
			uri = 'http://localhost:9082/api/v3'
			nid = 0x3
		}
		mainnet {
			uri = 'https://ctz.solidwallet.io/api/v3'
			nid = 0x1
			to = "cxb0b6f777fba13d62961ad8ce11be7ef6c4b2bcc6"
		}
		berlin {
			uri = 'https://berlin.net.solidwallet.io/api/v3'
			nid = 0x7
			to = 'cxc05ed69b43cf0c520cb7a8c302a18111eb1ea81b'
		}
	}
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
}

test {
    useJUnitPlatform()
}

sourceSets {
	integrationTest {
		java.srcDirs = [file('src/intTest/java')]

		compileClasspath += sourceSets.main.output + configurations.testRuntime
		runtimeClasspath += output + compileClasspath
	}
}

configurations {
  integrationTestCompile.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

def daoletteJar = project(':daolette').getTasks().getByName('optimizedJar')
def dividendDistributionScoreJar = project(':dividend-distribution-score').getTasks().getByName('optimizedJar')
def gameAuthorizationScoreJar = project(':game-authorization-score').getTasks().getByName('optimizedJar')
def rewardDistributionJar = project(':reward-distribution').getTasks().getByName('optimizedJar')
def tapTokenJar = project(':tap-token').getTasks().getByName('optimizedJar')

task integrationTest(type: Test, dependsOn: optimizedJar) {
	useJUnitPlatform()
	description = 'Runs integration tests.'
	group = 'verification'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	testLogging.showStandardStreams = true

	// use the common config files
	systemProperty('env.props', new File(project(':testinteg').projectDir, 'conf/env.props'))

	def prefix = 'score.path.'

	systemProperty(prefix + project.name, optimizedJar.outputJarName)
	systemProperty(prefix + 'tap-token', tapTokenJar.outputJarName.substring(0, tapTokenJar.outputJarName.lastIndexOf("-optimized.jar") )+ "-"+project.version+"-optimized.jar" )
	systemProperty(prefix + 'daolette', daoletteJar.outputJarName.substring(0, daoletteJar.outputJarName.lastIndexOf("-optimized.jar") )+"-"+project.version+"-optimized.jar" )
	systemProperty(prefix + 'dividend-distribution-score', dividendDistributionScoreJar.outputJarName.substring(0, dividendDistributionScoreJar.outputJarName.lastIndexOf("-optimized.jar") )+ "-"+project.version+"-optimized.jar" )
	systemProperty(prefix + 'game-authorization-score', gameAuthorizationScoreJar.outputJarName.substring(0, gameAuthorizationScoreJar.outputJarName.lastIndexOf("-optimized.jar") )+ "-"+project.version+"-optimized.jar" )
	systemProperty(prefix + 'reward-distribution', rewardDistributionJar.outputJarName.substring(0, rewardDistributionJar.outputJarName.lastIndexOf("-optimized.jar") )+ "-"+project.version+"-optimized.jar" )
}

integrationTest.dependsOn(daoletteJar)
integrationTest.dependsOn(dividendDistributionScoreJar)
integrationTest.dependsOn(gameAuthorizationScoreJar)
integrationTest.dependsOn(rewardDistributionJar)
integrationTest.dependsOn(tapTokenJar)
